<div class="card">
    <div class="card-body">
        <div class="row align-items-center mb-4">
        <!-- 🏷️ Title and data update on the left -->
        <div class="col">
            <h1 class="card-title mb-1">Lease search</h1>
            <% if (latestVersion) {
                const [y, m] = latestVersion.split('-');
                const updateDate = new Date(y, m - 1);
                const formatter = new Intl.DateTimeFormat('en-GB', { month: 'long', year: 'numeric' });
            %>
            <div class="text-muted">
                <small>Data last updated: <%= formatter.format(updateDate) %></small>
            </div>
            <% } %>
        </div>

        <!-- ✅ User info and logout on the right -->
        <div class="col-auto text-end">
            <div class="text-muted">
            <small>
                <a href="/profile" class="text-decoration-none"><%= email %></a>
            </small>
            </div>
            <form action="/logout" method="POST" class="d-inline">
            <button type="submit" class="btn btn-link btn-sm text-decoration-none p-0" aria-label="Log out">
                Log out
            </button>
            </form>
        </div>
        </div>

        <div class="alert alert-info mb-4">
            <div class="d-flex justify-content-between align-items-center">
                <span>You have <strong><%= remainingSearches %></strong> searches remaining today.</span>
            </div>
        </div>

        <form id="address-search-form" class="mb-4" role="search" aria-label="Lease address search" autocomplete="off">
            <div class="mb-3">
                <label for="address" id="addressHelp" class="form-label">Enter a valid UK postcode or start of address<br/>(England and Wales only — full postcode gives best results.)</label>
                <div class="input-group mb-1">
                <input type="text"
                        class="form-control form-control-lg"
                        id="address"
                        name="address"
                        placeholder="e.g. 20 Hemstal Road, NW6 2AL or Clapton"
                        required
                        autocomplete="off"
                        aria-describedby="addressHelp"
                        aria-label="Search for a UK address or postcode"
                        <%= remainingSearches === 0 ? 'disabled' : '' %>>
                <button class="visually-hidden" type="submit" class="btn btn-primary btn-lg" id="search-btn">
                    <span class="visually-hidden">Search</span>
                    <i class="bi bi-search" aria-hidden="true"></i>
                </button>
                </div>
                <div class="text-end text-muted">
                    <small><a href='not-found'>Can't find your lease?</a></small>
                </div>
            </div>
            </form>

        <div id="results" class="mt-4 d-none" aria-live="polite" aria-atomic="true">
            <!-- Results will be displayed here -->
        </div>

        <% if (bookmarkedLeases && bookmarkedLeases.length > 0) { %>
            <div class="mt-4">
                <h3>Bookmarked Leases</h3>
                <div class="list-group">
                    <% bookmarkedLeases.forEach(lease => { %>
                        <a href="/app/lease/<%= encodeURIComponent(lease['Unique Identifier']) %>"
                            class="list-group-item list-group-item-action d-flex justify-content-between align-items-start">
                            <div>
                            <strong><%= lease['Register Property Description'] || '' %></strong><br>
                            <span><%= lease['Associated Property Description'] || '' %></span>
                            </div>
                            <% if (lease.isStale) { %>
                            <span class="badge bg-warning text-dark ms-2" title="This lease has been updated since you last viewed it.">
                                Updated
                            </span>
                            <% } %>
                        </a>
                        <% }); %>
                </div>
            </div>
        <% } %>

        <% if (recentlyViewedLeases && recentlyViewedLeases.length > 0) { %>
            <div class="mt-4">
                <h3>Recently Viewed This Session</h3>
                <div class="list-group">
                    <% recentlyViewedLeases.forEach(lease => { %>
                        <a href="/app/lease/<%= encodeURIComponent(lease.uid) %>"
                        class="list-group-item list-group-item-action">
                            <strong><%= lease.rpd || '' %></strong><br>
                            <span><%= lease.apd || '' %></span>
                        </a>
                    <% }); %>
                </div>
            </div>
        <% } %>

<style>
.input-group .btn {
    padding-left: 2rem;
    padding-right: 2rem;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const input = document.getElementById('address');
    if (input) input.focus();
});

document.getElementById('address').addEventListener('input', function(e) {
    this.value = this.value.toUpperCase().replace(/[^A-Z0-9 ]/g, '');
});

function lookupPostcode(postcode) {
    document.getElementById('address').value = postcode;
    document.querySelector('form').submit();
}

let debounceTimeout;
let cachedResults = [];
let currentPostcode = '';
const addressInput = document.getElementById('address');
const resultsDiv = document.getElementById('results');

// Filter and render results client-side when we already matched a full postcode
function filterAndRenderResults(query) {
    const postcodeMatch = query.match(/\b([A-Z]{1,2}\d{1,2}[A-Z]?)\s?(\d[A-Z]{2})\b/i);
    const fullPostcode = postcodeMatch ? `${postcodeMatch[1].toUpperCase()} ${postcodeMatch[2].toUpperCase()}` : '';
    const filterText = query.replace(fullPostcode, '').trim().toLowerCase();

    const filtered = cachedResults.filter(r => {
        if (!filterText) return true;

        // Strip postcode from fields before comparing
        const stripPostcode = str =>
            (str || '').toLowerCase().replace(fullPostcode.toLowerCase(), '').trim();

        const cleanedRegister = stripPostcode(r['Register Property Description']);
        const cleanedAssociated = stripPostcode(r['Associated Property Description']);

        return cleanedRegister.includes(filterText) || cleanedAssociated.includes(filterText);
    });

    renderResults(filtered);
}

function renderResults(results) {
    if (results && results.length > 0) {
        resultsDiv.classList.remove('d-none');
        resultsDiv.innerHTML = `
            <h5 id="results-heading">Matching Addresses</h5>
            <ul class="list-group" aria-labelledby="results-heading">
                ${results.map(lease => `
                    <li class="list-group-item list-group-item-action" style="cursor:pointer" tabindex="0" role="button" aria-pressed="false" onclick="window.location='/app/lease/${encodeURIComponent(lease['Unique Identifier'])}'" onkeydown="if(event.key==='Enter'){window.location='/app/lease/${encodeURIComponent(lease['Unique Identifier'])}'}">
                        <strong>${lease['Register Property Description'] || ''}</strong><br>
                        <span>${lease['Associated Property Description'] || ''}</span>
                    </li>
                `).join('')}
            </ul>
        `;
    } else {
        resultsDiv.classList.remove('d-none');
        resultsDiv.innerHTML = `
            <div class="alert alert-warning" role="alert">
                No matching addresses found.
            </div>
        `;
    }
}

addressInput.addEventListener('input', function() {
    clearTimeout(debounceTimeout);
    const query = this.value.trim();
    if (query.length < 3) {
        resultsDiv.classList.add('d-none');
        resultsDiv.innerHTML = '';
        cachedResults = [];
        currentPostcode = '';
        return;
    }

    // Detect if we're still filtering the same postcode-based results
    const postcodeMatch = query.match(/\b([A-Z]{1,2}\d{1,2}[A-Z]?)\s?(\d[A-Z]{2})\b/i);
    const fullPostcode = postcodeMatch ? `${postcodeMatch[1].toUpperCase()} ${postcodeMatch[2].toUpperCase()}` : '';

    if (cachedResults.length > 0 && fullPostcode && fullPostcode === currentPostcode) {
        // Just filter the cached results
        filterAndRenderResults(query);
        return;
    }

    // Otherwise fetch fresh results
    debounceTimeout = setTimeout(() => {
        fetch(`/app/lease-lookup?query=${encodeURIComponent(query)}`)
            .then(res => res.json())
            .then(data => {
                cachedResults = data;
                currentPostcode = fullPostcode;
                renderResults(data);
            })
            .catch(() => {
                resultsDiv.classList.add('d-none');
                resultsDiv.innerHTML = '';
            });
    }, 1000); // 1 second debounce
});

const addressForm = document.getElementById('address-search-form');
addressForm.addEventListener('submit', function(e) {
    e.preventDefault();
    const query = addressInput.value.trim();
    if (query.length < 3) {
        resultsDiv.classList.add('d-none');
        resultsDiv.innerHTML = '';
        return;
    }
    fetch(`/app/lease-lookup?query=${encodeURIComponent(query)}`)
        .then(res => res.json())
        .then(data => {
            cachedResults = data;
            const postcodeMatch = query.match(/\b([A-Z]{1,2}\d{1,2}[A-Z]?)\s?(\d[A-Z]{2})\b/i);
            currentPostcode = postcodeMatch ? `${postcodeMatch[1].toUpperCase()} ${postcodeMatch[2].toUpperCase()}` : '';
            renderResults(data);
        })
        .catch(() => {
            resultsDiv.classList.add('d-none');
            resultsDiv.innerHTML = '';
        });
});
</script>