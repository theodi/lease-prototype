      <%
const fieldDescriptions = {
  'Unique Identifier': 'A unique reference number given to a piece of registered land',
  'Tenure': 'The conditions upon which a person holds land i.e. Freehold or Leasehold',
  'Register Property Description': 'The unformatted property description in the register',
  'County': 'Name of current County in England and Wales',
  'Region': 'Name of a geographic region which comprises one or more current counties, former counties or unitary authorities or any combination of these',
  'Associated Property Description ID': 'Uniquely identifies the Associated Property Description',
  'Associated Property Description': ' 	All Land Registry Property Gazetteer (LRPG) addresses associated with the registered property. Each unique identifier may refer to multiple associated property descriptions.',
  'OS UPRN': 'A Unique Property Reference Number (UPRN) used by Ordnance Survey for the spatial address of a property. If no UPRN is available, this attribute will be blank',
  'Price Paid': 'The sale price stated on the transfer deed which will be the last recorded sale price available in our published Price Paid Dataset. This may not relate to the sale to the current proprietor which may have been excluded',
  'Reg Order': 'Leasehold titles can be comprised of 1 or more leases; the leases are represented by a number in the order of registration date on the register',
  'Date of Lease': 'Date that the lease is signed and becomes a legal document. This may not be the start of the lease term.',
  'Term': 'The period for which the lease is granted. There is no standard format for this entry.',
  'Alienation Clause Indicator': 'Indicates whether an alienation clause, which limits the lessee‚Äôs power to dispose of the lease (re-assign, transfer, sublet or share occupation) is present in the register'
};
%>
      <% const importVersion = '2025-05'; %>
      <% const [importYear, importMonth] = importVersion.split('-'); %>
      <% const importVersionDate = new Date(importYear, importMonth - 1); %>
      <% let versionDate = null; %>
      <% let formatter = new Intl.DateTimeFormat('en-GB', { month: 'long', year: 'numeric' }); %>

      <% if (currentVersion) { %>
        <% const [year, month] = currentVersion.split('-'); %>
        <% versionDate = new Date(year, month - 1); %>
      <% } %>
<style>
    .wrap-text {
        word-wrap: break-word;
        word-break: break-word;
        white-space: normal;
    }
</style>
<div class="card mt-4">
    <div class="card-body">
      <h1 class="card-title mb-3">
        <%= leases[0]?.['Register Property Description'] || 'Unknown' %>
      </h1>
      <p class="text-muted">
        <% if (!currentVersion) { %>
          Last updated: unknown ‚Äì first seen in our original <%= formatter.format(importVersionDate) %> data import.
        <% } else if (currentVersion === importVersion) { %>
          Last updated: unknown ‚Äì first seen in our original <%= formatter.format(versionDate) %> data import.
        <% } else { %>
          Last updated: <%= formatter.format(versionDate) %>
        <% } %>
      </p>
      <% if (isUpdated) { %>
        <div class="alert alert-info">
          <strong>This record has been updated since you last viewed it.</strong><br>
          We are unable to tell you exactly what has changed. The update may be minor (such as a spelling correction) or major (such as a change to the lease term or a new lease being added).
        </div>
      <% } %>

      <% const rpdSet = new Set(leases.map(l => l['Register Property Description'])); %>
      <% if (rpdSet.size > 1) { %>
        <div class="alert alert-danger">
          ‚ö†Ô∏è Warning: Leases for this ID do not all share the same Register Property Description.
        </div>
      <% } %>
      <% const multipleLeases = leases.length > 1; %>
        <!-- Lease advisory message -->
        <div id="lease-advice-<%= uniqueId %>" class="mb-3"></div>

        <% if (multipleLeases) { %>
          <div class="alert alert-info">
            üìå This lease covers <%= leases.length %> properties. Click a row below to view details for each associated property.
          </div>
        <% } %>


        <div class="accordion" id="leaseAccordion">
            <% leases.slice().reverse().forEach((lease, idx) => { %>
                <% const leaseId = lease._id || idx; %>
                <% const isLatest = !multipleLeases && idx === 0; %>
                <div class="accordion-item"
                    data-lease-id="<%= leaseId %>"
                    data-reg-order="<%= lease['Reg Order'] || 0 %>">
                    <h2 class="accordion-header" id="heading-<%= leaseId %>">
                        <button class="accordion-button<%= isLatest ? '' : ' collapsed' %>" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-<%= leaseId %>" aria-expanded="<%= isLatest ? 'true' : 'false' %>" aria-controls="collapse-<%= leaseId %>">
                            <%= lease['Associated Property Description'] %>
                        </button>
                    </h2>
                    <div id="collapse-<%= leaseId %>" class="accordion-collapse collapse<%= isLatest ? ' show' : '' %>" aria-labelledby="heading-<%= leaseId %>" data-bs-parent="#leaseAccordion">
                        <div class="accordion-body">

                            <!-- üîπ Source Data Table -->
                             <h5 class="mt-3">Land Registry Source Data</h5>
                            <table class="table table-bordered">
                              <caption class="visually-hidden">Original lease data</caption>
                              <tbody>
                                <% Object.entries(lease).forEach(([key, value]) => { %>
                                  <% if (key !== '_id' && key !== '__v' && key !== 'createdAt' && key !== 'updatedAt') { %>
                                    <tr data-field="<%= key %>">
                                      <th scope="row">
                                        <% if (fieldDescriptions[key]) { %>
                                          <span
                                            tabindex="0"
                                            data-bs-toggle="tooltip"
                                            title="<%= fieldDescriptions[key] %>"
                                          >
                                            <%= key %>
                                            <span class="visually-hidden"> ‚Äì <%= fieldDescriptions[key] %></span>
                                          </span>
                                        <% } else { %>
                                          <%= key %>
                                        <% } %>
                                      </th>
                                      <td class="wrap-text">
                                        <% if (key === 'Price Paid' && value && !isNaN(value)) { %>
                                          ¬£<%= new Intl.NumberFormat('en-GB').format(parseFloat(value)) %>
                                        <% } else { %>
                                          <%= value %>
                                        <% } %>
                                      </td>
                                    </tr>
                                  <% } %>
                                <% }); %>
                              </tbody>
                            </table>

                            <!-- üî∏ Derived Data Table -->
                            <h5 class="mt-4">Derived Lease Information</h5>
                            <table class="table table-bordered">
                            <caption class="visually-hidden">Derived lease calculations</caption>
                            <tbody>
                                <tr>
                                <th scope="row">Remaining Term</th>
                                <td id="remaining-term-<%= leaseId %>">
                                    <span class="text-muted">Calculating...</span>
                                </td>
                                </tr>
                                <tr>
                                <th scope="row">Expiry Date</th>
                                <td id="expiry-date-<%= leaseId %>">
                                    <span class="text-muted">Calculating...</span>
                                </td>
                                </tr>
                                <tr>
                                <th scope="row">Derived By</th>
                                <td id="derived-by-<%= leaseId %>">
                                    <span class="text-muted">Detecting...</span>
                                </td>
                                </tr>
                            </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            <% }); %>
        </div>
        <!-- üõà Guidance CTA for possible issues -->
        <div class="mt-4">
          <a href="/lease-guidance?<%= uniqueId ? `uid=${encodeURIComponent(uniqueId)}` : '' %>"
            class="btn btn-primary w-100" role="button" aria-label="Guidance if you think the lease is incorrect">
            <i class="bi bi-info-circle me-2" aria-hidden="true"></i>
            Think this lease is incorrect? Read your options
          </a>
        </div>
        <div class="d-flex justify-content-between align-items-center mt-3">
            <a href="/app" class="btn btn-secondary">Back to Search</a>
            <div id="bookmark-controls" aria-label="Bookmark controls">
              <% if (!isBookmarked) { %>
                <button id="bookmark-btn"
                        class="btn btn-primary"
                        aria-pressed="false"
                        <%= !canBookmark ? 'disabled' : '' %>>
                  <span class="visually-hidden">Bookmark this lease</span>
                  <i class="bi bi-bookmark-plus" aria-hidden="true"></i> Bookmark
                </button>
                <% if (!canBookmark) { %>
                  <div class="form-text text-danger mt-1">You‚Äôve reached your bookmark limit.</div>
                <% } %>
              <% } else { %>
                <button id="unbookmark-btn" class="btn btn-danger" aria-pressed="true">
                  <span class="visually-hidden">Remove bookmark for this lease</span>
                  <i class="bi bi-bookmark-dash" aria-hidden="true"></i> Remove bookmark
                </button>
              <% } %>
            </div>
        </div>
    </div>
</div>
<script>
  document.addEventListener('DOMContentLoaded', async function () {
    const uniqueId = '<%= uniqueId %>';
    const controls = document.getElementById('bookmark-controls');
    const remainingViews = document.querySelector('strong[remaining-views]');

    function updateButton(isBookmarked) {
      controls.innerHTML = isBookmarked
        ? '<button id="unbookmark-btn" class="btn btn-danger" aria-pressed="true">\
            <span class="visually-hidden">Remove bookmark for this lease</span>\
            <i class="bi bi-bookmark-dash" aria-hidden="true"></i> Remove bookmark</button>'
        : '<button id="bookmark-btn" class="btn btn-primary" aria-pressed="false">\
            <span class="visually-hidden">Bookmark this lease</span>\
            <i class="bi bi-bookmark-plus" aria-hidden="true"></i> Bookmark</button>';
    }

    controls.addEventListener('click', function (e) {
      if (e.target.id === 'bookmark-btn') {
        fetch(`/app/lease/${uniqueId}/bookmark`, { method: 'POST' }).then((res) => {
          if (res.ok) updateButton(true);
        });
      } else if (e.target.id === 'unbookmark-btn') {
        fetch(`/app/lease/${uniqueId}/unbookmark`, { method: 'POST' }).then((res) => {
          if (res.ok) updateButton(false);
        });
      }
    });

    const derivedLeases = new Map();

    const leaseElements = document.querySelectorAll('[id^="remaining-term-"]');
    await Promise.all(
      Array.from(leaseElements).map(async (el) => {
        const leaseId = el.id.replace('remaining-term-', '');
        const container = document.querySelector(`[data-lease-id="${leaseId}"]`);
        const regOrder = parseInt(container?.dataset.regOrder) || 0;

        const termText = container.querySelector('tr[data-field="Term"] td')?.textContent?.trim();

        if (!termText) return;

        try {
          const res = await fetch('/app/lease/derive-term', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ term: termText }),
          });
          const data = await res.json();

          // Update fields
          document.getElementById(`remaining-term-${leaseId}`).textContent = data.remainingTerm || '‚Äî';
          document.getElementById(`expiry-date-${leaseId}`).textContent = data.expiryDate
            ? new Date(data.expiryDate).toLocaleDateString('en-GB', {
                day: '2-digit',
                month: 'long',
                year: 'numeric',
              })
            : '‚Äî';

          const derivedEl = document.getElementById(`derived-by-${leaseId}`);
          derivedEl.innerHTML =
            data.source === 'regex'
              ? '<span data-bs-toggle="tooltip" title="Parsed by matching the term against a known pattern">üß© Pattern Match</span>'
              : '<span data-bs-toggle="tooltip" title="Parsed using AI to extract date information from the lease term">ü§ñ AI</span>';

          // Store for advice logic
          if (data.expiryDate) {
            derivedLeases.set(leaseId, {
              expiryDate: new Date(data.expiryDate),
              regOrder,
            });
          }
        } catch (err) {
          document.getElementById(`remaining-term-${leaseId}`).textContent = 'Error';
          document.getElementById(`expiry-date-${leaseId}`).textContent = 'Error';
          document.getElementById(`derived-by-${leaseId}`).textContent = 'Error';
        }
      })
    );

    // Determine lease to base advice on
    const bestLease = Array.from(derivedLeases.entries()).reduce((best, [id, info]) => {
      if (!best) return { id, ...info };
      if (
        info.regOrder > best.regOrder ||
        (info.regOrder === best.regOrder && info.expiryDate > best.expiryDate)
      ) {
        return { id, ...info };
      }
      return best;
    }, null);

    if (bestLease) {
      const now = new Date();
      let yearsLeft = bestLease.expiryDate.getFullYear() - now.getFullYear();
      if (
        bestLease.expiryDate.getMonth() < now.getMonth() ||
        (bestLease.expiryDate.getMonth() === now.getMonth() &&
          bestLease.expiryDate.getDate() < now.getDate())
      ) {
        yearsLeft -= 1;
      }

      const target = document.getElementById(`lease-advice-${uniqueId}`);
      if (target) {
        let html = '';
        if (yearsLeft < 0) {
          html = `<div class="alert alert-danger">‚ùå This lease has expired.</div>`;
        } else if (yearsLeft > 100) {
          html = `<div class="alert alert-success">üéâ Your lease has over 100 years years remaining ‚Äî you can relax.</div>`;
        } else if (yearsLeft >= 80) {
          html = `<div class="alert alert-warning">‚ö†Ô∏è Your lease has between 80 and 100 years remaining ‚Äî you should strongly consider extending it now.</div>`;
        } else {
          html = `<div class="alert alert-danger">üö® Your lease has around fewer that 80 years remaining ‚Äî you should seek legal advice as soon as possible.</div>`;
        }
        target.innerHTML = html;
      }
    }

    // Enable Bootstrap tooltips
    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    tooltipTriggerList.forEach((el) => new bootstrap.Tooltip(el));
  });
</script>
